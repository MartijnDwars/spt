%% Grammar for the Spoofax-Testing language
%% By default, based on an example "entities" syntax
module Spoofax-Testing

imports Common
imports Spoofax-Testing-String-Quotation
imports languages/aterm/syntax/ATerms
imports RegExp
imports Stratego-Sugar %% TODO: import Stratego-SugarMix

exports
  context-free start-symbols TestSuite

exports
  sorts TestSuite TopSort Test Input Result
  context-free syntax
    "testsuite" Name Option* TestDecl* -> TestSuite {cons("testsuite")}
    "options"         -> Option {cons("Options"), deprecated}
    "topsort" Sort    -> Option {cons("TopSort")}
    "language" Sort   -> Option {cons("Language")}
    
    %% TODO: make topsort optional

    ParseTest    -> TestDecl
    StrategoTest -> TestDecl
    VarDecl      -> TestDecl
    
  lexical syntax
    ~[\ \t\n\r]+ -> OptionValue
    "test"       -> OptionValue {reject}

  lexical restrictions
    OptionValue -/- ~[\ \t\n\r]

  %% The description syntax is very ambiguous if comments are allowed around it. So, we forbid comments.
  syntax
    "test" <Space-LEX> <Description-CF> <LAYOUT?-CF> <Input-CF> <LAYOUT?-CF> <Result*-CF> -> <ParseTest-CF> {cons("Test")}
    "test" <Space-LEX> <Description-CF> <LAYOUT?-CF> <TestStrategy-CF> <LAYOUT?-CF> <StrategoResult-CF>
      -> <StrategoTest-CF> {cons("TestStratego")}
    "test" <Space-LEX> <Description-CF> -> <ParseTest-CF> {cons("TestEmpty")}

  context-free syntax
    ID "=" ATerm -> VarDecl {cons("VarDecl")}

  context-free syntax
               -> StrategoResult {cons("StrategySuccess")}
    "succeeds" -> StrategoResult {cons("StrategySuccess")}
    "fails"    -> StrategoResult {cons("StrategyFails")}
    "=>" ATerm -> StrategoResult {cons("StrategyEquals")}
    "->" ATerm -> StrategoResult {cons("StrategyEquals"), deprecated("Use => instead of ->")}
    Strategy   -> TestStrategy

    String                               -> TestStrategy {reject}
    "[" {Strategy ","}* "]"              -> TestStrategy {reject}
    "[" {Strategy ","}* "|" Strategy "]" -> TestStrategy {reject}
    Strategy "=>" Term                   -> TestStrategy {reject}
    "succeeds"                           -> Term {reject}
    "fails"                              -> Term {reject}

  lexical syntax
    [\ ]+ -> Space

  lexical restrictions
    Space -/- [\ ]

  context-free syntax
    
    "->" "file" PathName -> Result {cons("file"),    deprecated("Use => instead of ->")}
    "->" ATerm           -> Result {cons("pattern"), deprecated("Use => instead of ->")}
    
    "=>" "file" PathName -> Result {cons("file")}
    "=>" ATerm           -> Result {cons("pattern")}

    "fails"              -> Result {cons("Fails")}
    "fails" "parsing"    -> Result {cons("FailsParsing")}
    "succeeds"           -> Result {cons("Success")}
    "succeeds" "parsing" -> Result {cons("SuccessParsing")}

    "file" PathName -> Input {cons("file")}

    "1" "error"       -> Result    {cons("Error")}
    INT "errors"      -> Result    {cons("Errors")}
    
    "1" "warning"     -> Result    {cons("Warning")}
    INT "warnings"    -> Result    {cons("Warnings")}
    
    "resolves" ID                    -> Result {cons("Resolves")}
    "resolves" ID "to" ID            -> Result {cons("ResolvesTo")}
    "completes" ID "to" ID           -> Result {cons("Completes")}
    "builds" ID "to" ATerm           -> Result {cons("Builds")}
    "builds" ID "to" "file" PathName -> Result {cons("BuildsFile")}
    %% TODO: hover help
    
    RegexExp          -> Constraint
    
    %% Handle a couple of lousy recoveries
    "test" -> ID    {reject}
    "test" -> ATerm {reject}
           -> "resolves" {recover, reject}
           -> "=>" {recover, reject}
           -> "->" {recover, reject}

context-free syntax

  %% UNDONE: ATerm syntax patches that should be in our ATerm.def already

  %% allow unquoted upper case AFuns
  %% lexical syntax
  %%   "" -> IdCon {cons("empty")}

  %% empty is ok, but cannot be a complete ATerm.
  %% context-free syntax
  %%   ""-> ATerm {reject}

  %% allow function applications without arguments
  %%context-free syntax
  %%  fun:AFun "(" ")" -> ATerm {cons("fun")}
  
    "_"                  -> ATerm  {cons("wildcard")}
    "..."                -> { ATerm ","}+ {cons("wildcardvar")}

  context-free syntax
    StringQuotation -> Input
    
  sorts
  syntax
    <DQuote1-LEX> <InputChars1-LEX> <DQuote1-LEX> -> <Input-CF> {cons("string")}
    <DQuote2-LEX> <InputChars2-LEX> <DQuote2-LEX> -> <Input-CF> {cons("string")}
    <DQuote3-LEX> <InputChars3-LEX> <DQuote3-LEX> -> <Input-CF> {cons("string")}
    <DQuote4-LEX> <InputChars4-LEX> <DQuote4-LEX> -> <Input-CF> {cons("string")}

  %% Too close to Stratego
  %%<Bracket1-LEX> <InputChars21-LEX> <CloseBracket1-LEX> -> <Input-CF> {cons("string")}
  
    <Bracket2-LEX> <InputChars22-LEX> <CloseBracket2-LEX> -> <Input-CF> {cons("string")}
    <Bracket3-LEX> <InputChars23-LEX> <CloseBracket3-LEX> -> <Input-CF> {cons("string")}
    <Bracket4-LEX> <InputChars24-LEX> <CloseBracket4-LEX> -> <Input-CF> {cons("string")}

  sorts Name Description
  context-free syntax
    EOLString -> Name {cons("name")}
    EOLString -> Description {cons("description")}

  sorts Sort EOLString
  lexical syntax
    [A-Z]                          -> Sort
    [A-Z][A-Za-z0-9\-]*[A-Za-z0-9] -> Sort

    ~[\n]+ -> EOLString

  sorts
    InputChars1 InputChars2 InputChars3 InputChars4
    DQuote1 DQuote2 DQuote3
    InputChars21 InputChars22 InputChars23 InputChars24
    Bracket1 Bracket2 Bracket3

  lexical syntax
    ~[\"]* -> InputChars1
    (~[\"]  | DQuote1)*                      -> InputChars2
    (~[\"]  | DQuote1 | DQuote2)*            -> InputChars3
    (~[\"]  | DQuote1 | DQuote2 | DQuote3 )* -> InputChars4

    "\""       -> DQuote1
    "\"\""     -> DQuote2
    "\"\"\""   -> DQuote3
    "\"\"\"\"" -> DQuote4

    ~[\[]* -> InputChars21
    (~[\[]  | Bracket1)*                        -> InputChars22
    (~[\[]  | Bracket1 | Bracket2)*             -> InputChars23
    (~[\[]  | Bracket1 | Bracket2 | Bracket3 )* -> InputChars24

    "["    -> Bracket1
    "[["   -> Bracket2
    "[[["  -> Bracket3
    "[[[[" -> Bracket4

    "]"    -> CloseBracket1
    "]]"   -> CloseBracket2
    "]]]"  -> CloseBracket3
    "]]]]" -> CloseBracket4

  sorts PathName
  lexical syntax
    [A-Za-z0-9\-\_\.\\\/]+ -> PathName

  lexical restrictions
    Sort      -/- [A-Za-z0-9\-]
    EOLString -/- ~[\n]

    DQuote1   -/- [\"]
    DQuote2   -/- [\"]
    DQuote3   -/- [\"]

    Bracket1   -/- [\[]
    Bracket2   -/- [\[]
    Bracket3   -/- [\[]

  sorts ShortCom LongCom CommChar Asterisk Eof
  lexical syntax
    "//" ~[\n]* ([\n] | Eof) -> ShortCom
    "/*" CommChar* "*/"      -> LongCom
                             -> Eof
    
    ~[\*]      -> CommChar

    "*"        -> Asterisk
    Asterisk   -> CommChar

  lexical restrictions
    Asterisk -/- [\/]

  lexical syntax
    ShortCom    -> LAYOUT
    LongCom     -> LAYOUT

