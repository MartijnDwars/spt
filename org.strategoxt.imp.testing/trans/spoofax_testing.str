module spoofax_testing

imports
  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  libstratego-sglr
  include/Spoofax-Testing
  lib/editor-common.generated
  analysis
  check
  generate
  file-resolving

rules
    
  editor-analyze:
    (ast, path, project-path) -> (ast, errors', warnings', notes')
    with
      editor-init
    ; scope-paths(
        <chdir> project-path;
        <record-all-sdfs> ".";
        rules(InputFile := path);
        errors    := <collect-all(check-error, conc)> ast;
        warnings  := <collect-all(check-warning, conc)> ast;
        notes     := <collect-all(check-note, conc)> ast;
        errors'   := <flatten-list> [errors, <bagof-GrabbedErrors>];
        warnings' := <flatten-list> [warnings, <bagof-GrabbedWarnings>];
        notes'    := <flatten-list> [notes, <bagof-GrabbedNotes>];
        if not([] := errors) then
            rules ( HasErrors := () )
        end
      | path, project-path
      )
  
  generate-java:
    (selected, position, ast, path, project-path) -> result
    with
      scope-paths( result := <to-java> selected | path, project-path)
  
  generate-aterm:
    (selected, position, ast, path, project-path) -> (filename, selected)
    with
      filename := <guarantee-extension(|"aterm")> path
  
  editor-hover:
    (string(_,s,_), _, _, _, _) -> hover
    where
      hover := <parse-string-and-pp-aterm ; hover-input-string>s 
  
  hover-input-string =
  	if ?error(_, _) then
      extract-parse-error
    else 
      <concat-strings>
        [ "The input string currently result in the following AST:<br>"
        , "<br>"
        , "<b><pre>",<id>,"</pre></b>"
        ]
    end 

  parse-string-and-pp-aterm =
    ast   := <spt-parse-string>
  ; pp    := <pp-aterm-box>ast
  ; <box2text-string(|80)>pp

  external input-dialog(|title, message, initial)


strategies
	
	// XXX: read Observer(_) subterm from ./include/*.packed.esv
	spt-get-observer =
		!"editor-analyze"
	
	// XXX: read LanguageName(_) subterm from ./include/*.packed.esv
	spt-get-language =
		!"TestingTesting"

  spt-get-parsetable =
  	SPTParseTable
   <+ <readdir>"./include" 
    ; fetch-elem(has-extension(|"tbl")) 
    ; pt := <ReadFromFile>$[./include/[<id>]]
    ; rules( SPTParseTable := pt )    
  	
  spt-parse-string =
    prim("STRSGLR_set_recovery_off");
    parse-string(
      id
    | <spt-get-parsetable>
    )    

        