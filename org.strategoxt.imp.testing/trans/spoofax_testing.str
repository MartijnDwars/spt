module spoofax_testing

imports
  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  libstratego-sglr
  include/Spoofax-Testing
  lib/editor-common.generated
  analysis
  check
  generate
  file-resolving

rules
    
  editor-analyze:
    (ast, path, project-path) -> (ast, errors, warnings, notes)
    with
      scope-paths(
        editor-init;
        <chdir> project-path;
        <record-all-sdfs> ".";
        errors   := <collect-all(constraint-error, conc)> ast;
        warnings := <collect-all(constraint-warning, conc)> ast;
        notes    := <collect-all(constraint-note, conc)> ast;
        if not([] := errors) then
            rules ( HasErrors := () )
        end
      | path, project-path)
  
  generate-java:
    (selected, position, ast, path, project-path) -> result
    with
      scope-paths( result := <to-java> selected | path, project-path)
  
  generate-aterm:
    (selected, position, ast, path, project-path) -> (filename, selected)
    with
      filename := <guarantee-extension(|"aterm")> path
  
  editor-hover:
    (string(_,s,_), _, _, _, _) -> hover
    where
      hover := <parse-string-and-pp-aterm ; hover-input-string>s 
  
  hover-input-string = 
    <concat-strings>
      [ "The input string currently result in the following AST:<br>"
      , "<br>"
      , "<b><pre>",<id>,"</pre></b>"
      ] 

  parse-string-and-pp-aterm =
    ast   := <spt-parse-string>
  ; pp    := <pp-aterm-box>ast
  ; <box2text-string(|80)>pp

  external input-dialog(|title, message, initial)

// 
strategies

  spt-get-parsetable =
  	spt-parsetable
   <+ <readdir>"./include" 
    ; fetch-elem(has-extension(|"tbl")) 
    ; pt := <ReadFromFile>$[./include/[<id>]]
    ; rules( spt-parsetable := pt )    
  	
  spt-parse-string =
    prim("STRSGLR_set_recovery_on");
    parse-string(
      id
    | <spt-get-parsetable>
    )    

        