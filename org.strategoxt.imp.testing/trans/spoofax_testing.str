module spoofax_testing

imports
  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  libstratego-sglr
  include/Spoofax-Testing
  lib/editor-common.generated
  analysis
  check
  generate
  file-resolving

rules
    
  editor-analyze:
    (ast, path, project-path) ->
    (ast, errors', warnings', notes')
    with
      editor-init
    with
      (errors', warnings', notes') := <report-invalid-language> ast
    <+
      scope-paths(
        <chdir> project-path;
        <record-all-sdfs> ".";
        rules(
          InputFile := path
          Language  := <get-language> ast
        );
        errors    := <collect-all(check-error, conc)> ast;
        warnings  := <collect-all(check-warning, conc)> ast;
        notes     := <collect-all(check-note, conc)> ast;
        errors'   := <flatten-list> [errors, <bagof-GrabbedErrors>];
        warnings' := <flatten-list> [warnings, <bagof-GrabbedWarnings>];
        notes'    := <flatten-list> [notes, <bagof-GrabbedNotes>];
        if not([] := errors) then
            rules ( HasErrors := () )
        end
      | path, project-path
      )
  
  report-invalid-language:
    testsuite(h*, _) -> ([error], [], [])
    where
      not(get-language);
      error := (h*, $[Specify a language to be tested e.g., language [
      	                <spt-get-default-language <+ !""> ]])
    <+
      language := <get-language>;
      not(spt-exists-language(|language));
      error := (language, $[Language [language] not defined or not loaded])
  
  get-language:
    testsuite(header*, _) -> language
    where
      <one(?Language(language))> header*
  
  generate-java:
    (selected, position, ast, path, project-path) -> result
    with
      scope-paths( result := <to-java(|<base-filename> path)> selected | path, project-path)
  
  generate-aterm:
    (selected, position, ast, path, project-path) -> (filename, selected)
    with
      filename := <guarantee-extension(|"aterm")> path
  
  editor-hover:
    (Input(_, _, _, _){a*}, _, _, _, _) -> hover
    where
      !a* => [ast | _];
      hover := <spt-pp-aterm ; hover-input-string>ast 
  
  hover-input-string =
  	if ?error(_, _) then
      extract-parse-error
    else 
      !$[The input string currently result in the following AST:<br />
         <br />
         <b>
           <pre>
             [<id>]
           </pre>
         </b>
        ]
    end 


  spt-pp-aterm =
    pp-aterm-box ; box2text-string(|80)
    
  external input-dialog(|title, message, initial)

strategies
  
  editor-complete:
    (EmptyFile(_), _, _, path, _) ->
    [[$( module (<base-filename; remove-extension> path) 
       
       language (<spt-get-default-language>)
       
       test First test
         [[), " ", "test", " ]]"]]
	
  editor-complete:
    (Language(t), _, _, _, _) -> [<spt-get-default-language>]

  editor-complete = debug; fail

strategies
  
  external plugin-get-property-values(|language)
  
  plugin-get-string-property:
    property -> value
    where
      plugin-get-property-values(|<Language>) => [property#([value]) | _]
	
  spt-get-observer =
    <plugin-get-string-property> "SemanticObserver"

  spt-get-reference-resolvers =
    <plugin-get-property-values(|<Language>)> "ReferenceRule";
    map(?"ReferenceRule"#([_, <id>]))

  spt-get-content-proposers =
    <plugin-get-property-values(|<Language>)> "CompletionProposer";
    map(?"CompletionProposer"#([<id>]))

  spt-get-hover-helpers =
    <plugin-get-property-values(|<Language>)> "HoverRule";
    map(?"HoverRule"#([_, <id>]))

  spt-get-builders =
    <plugin-get-property-values(|<Language>)> "Builder";
    map(\"Builder"#([_, d, s]) -> (d, s)\)
  
  spt-exists-language(|language) =
    where(<plugin-get-property-values(|language)> "LanguageName")
  
  spt-get-default-language =
    <readdir> $[[<project-path>]/include]
    ; fetch-elem(has-extension(|"esv")) 
    ; esv := <ReadFromFile>$[./include/[<id>]]
    ; collect-one(?"LanguageName"#([<id>]))

  spt-get-parsetable =
  	SPTParseTable
   <+ <readdir> $[[<project-path>]/include] 
    ; fetch-elem(has-extension(|"tbl")) 
    ; pt := <ReadFromFile>$[./include/[<id>]]
    ; rules( SPTParseTable := pt )    
  	
  spt-parse-string =
    prim("STRSGLR_set_recovery_off");
    parse-string(
      id
    | <spt-get-parsetable>
    )    
  
  get-service-input-term =
    get-service-input-term(|<LastAnalyzedAst>)
  
  execute-service(|node):
    resolver -> <plugin-strategy-invoke(|<Language>, resolver)> node
  
  external get-service-input-term(|analyzed-ast)
