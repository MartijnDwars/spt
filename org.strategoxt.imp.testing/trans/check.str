module check

imports
  libstratego-lib
  libstratego-aterm
  include/Spoofax-Testing
  lib/editor-common.generated
  aterm-eq
  spoofax_testing
  file-resolving
  check-resolve
  check-complete
  check-builders

signature constructors
  error : Term * Term -> Term
  localized : Term * Term -> Term
  amb : List(Term) -> Term
  
rules
  
  spt-desugar:
    Error(n) -> Errors(n)
  
  spt-desugar:
    Warning(n) -> Warnings(n)

  spt-desugar:
    Fatal(n) -> Fatals(n)

  spt-desugar-refactoring-conditions =
    at-suffix-rev(spt-desugar-refactor-expectations)

  spt-desugar-refactor-expectations:
  	[Refactor(strategy, arg, expected-ast)|expectations] -> 
  	[Refactor(strategy, arg, (expected-ast, refactor-expectations))]
  	where
  		zeros := [Fatals("0"), Errors("0"), Warnings("0")]; //TODO Fatals(0)
  		refactor-expectations := 
  			<union(?(Errors(_), Errors(_)) <+ ?(Warnings(_), Warnings(_)) <+ ?(Fatals(_), Fatals(_)))> (zeros, expectations)

  check-note = fail
  
  check-error:
    Test(_, d, _, c*) -> (d, "Can only combine success conditions with /regular expression/ conditions")
    where
      c'* := <filter(not(?RegexPattern(_)))> c*;
      <gt> (<length> c'*, 1) 
  
  check-error:
    TestEmpty(_, d) -> (<id>, "Empty test case")
  
  check-error:
    CompletionHelper(_) -> (<id>, "Syntax error")
  
  check-error:
    Test(_, d, _, expectations) -> (d, $[No observer defined for [<Language>]])
    where
      not(spt-get-observer)
  
  check-error:
    MarkedPlaceholder(_, _, _) -> (<id>, ${Placeholders of the form [[...]] are not yet supported; 
                                           place a 'footer' setup block at the end of the file instead})
  
  check-warning:
    Test(_,description(d), i, expectations) -> (d, warnings)
    where
      (input, selections) := <Test-get-input <+ !(FailsParsing(), [])>i
    ; if not(<?[_ | _]; all(is-parse-only-test)> expectations) then
        // TODO: set starting directory to project path using invoke-plugin-strategy
        plugin-strategy-invoke(|<Language>, "editor-init")
      ; input'    := (input, <InputFile>, <project-path>)
      ; messages  := <plugin-strategy-invoke(|<Language>, <spt-get-observer>)> input'
      ; messages' := <strip-and-record-analyzed-ast <+ reset-analyzed-ast> <try(?Some(<id>))> messages
      else
        messages' := ([], [], [])
      end
    ; if !expectations => [] then
        warnings := <filter(check-expectation(|input, selections, messages'))> [Success()]
      else
        warnings := <filter(check-expectation(|input, selections, messages'))> expectations
      end
    ; not([]) 
   
  strip-and-record-analyzed-ast:
    (t, e, w, n) -> (e, w, n)
    where
      rules(LastAnalyzedAst := t)

  reset-analyzed-ast =
      rules(LastAnalyzedAst := None())

  external plugin-strategy-invoke(|language, name)
  
  Test-get-input :
    file(f) -> (<resolve-path(|<current-path>) ; read-text-file ; spt-parse-string>f, [])
    
  Test-get-input :
    Input(_,_,_,_){a*} -> (parsed', selections)
    where
      !a* => [parsed | selections];
      if !parsed => Error(_) then
        parsed' := FailsParsing()
      else
        parsed' := parsed
      end
    <+
      // UNDONE: parsing from Stratego is no longer supported atm
      // parsed' := <spt-parse-string> s
      // warn(|"No ast annotation found")
    parsed' := FailsParsing()

  check-expectation(|ast, selections, messages) :
    <not(FailsParsing)> -> parse-failed
    where
      if !ast => FailsParsing() + !ast => error(_, _) then
        parse-failed := <extract-parse-error>
      <+
        parse-failed := "Fails to parse"
      end
  
  extract-parse-error =
    ?error(_, [localized(<id>, _) | _])

  check-expectation(|ast, selections, messages) :
    <not(Fails)> -> $[Observer fails: [details]]
    where
      !messages => Fail(details)

  check-expectation(|ast, selections, messages) :
    _ -> $[Observer error: [details]]
    where
      !messages => Error(details)

  check-expectation(|ast, selections, messages) :
    FailsParsing() -> $[Failure expected]
    where
      not(!ast => FailsParsing());
      not(!ast => error(_, _))

  check-expectation(|ast, selections, messages) :
    <not(?pattern(_))> -> $[Syntax is ambiguous: [<write-to-string> ast]]
    where
      <oncetd(?amb(_))> ast

  check-expectation(|ast, selections, messages) :
    pattern(p) -> $[Does not match pattern: [<write-to-string> ast]]
    where
      exploded := <explode-aterm> ast
    ; not(<aterm-eq> (exploded, p))

  check-expectation(|ast, selections, messages) :
    ParseOutput(_{^[output | _]}) -> $[Does not match pattern: [result]]
    where
      not(<eq> (ast, output))
    with
      result := <spt-pp-string> ast
    <+
      result := $[[<write-to-string> ast] instead of [<write-to-string> ast]]

  check-expectation(|ast, selections, messages) :
    file(f) -> $[Does not match pattern: [<write-to-string> ast]]
    where
      exploded := <explode-aterm> ast
    ; p := <resolve-path(|<current-path>); ReadFromFile; explode-aterm> f
    ; not(<aterm-eq> (exploded, p))

  check-expectation(|ast, selections, messages) :
    <not(is-semantic-failure-allowed)> -> $[Unexpected message(s): [<grab-messages> messages]]
    where
      not(!messages => ([], [], _))
  
  is-semantic-failure-allowed =
    Fails() + ?Errors(_) + ?Warnings(_) + ?CompleteTo(_, _) + ?RegexPattern(_)

  check-expectation(|ast, selections, messages) :
    Errors(n) -> $[[n] errors expected: [<grab-errors> messages]]
    where
      !messages => (errors, _, _)
    ; not(<eq> (<length> errors, <string-to-int> n))

  check-expectation(|ast, selections, messages) :
    Warnings(n) -> $[[n] warning(s) expected: [<grab-warnings> messages]]
    where
      !messages => ([], warnings, _)
    ; not(<eq> (<length> warnings, <string-to-int> n))

  check-expectation(|ast, selections, messages) :
    Warnings(n) -> $[No error(s) expected: [<grab-errors> messages]]
    where
      !messages => ([_ | _], _, _)

  check-error :
    Stratego(_) -> (<id>, $[Not implemented: [<write-to-string>]])

  check-error :
    VarDecl(_, _) -> (<id>, $[Not implemented: [<write-to-string>]])
  
  check-error :
    RegexPattern(r) -> (r, $[Full regular expression support not implemented])
    where
      not(simple-regex-to-string)
  
  check-expectation(|ast, selection, messages) :
    RegexPattern(r) -> $[Messages do not match "[r']": [<grab-messages> messages]]
    where
      r' := <simple-regex-to-string>;
      not(<oncetd(match-message(|r'))> messages)
  
  match-message(|r):
    (term, message) -> <id>
    where
      debug(!0);
      message' := <try(concat-strings)> message;
      debug(!1);
      <debug(!2)> r;
      <is-substring(!r)> message';
      debug(!3)
  
  simple-regex-to-string:
    RegexPattern(SingleBranch(Pieces(p*))) -> string
    where
      p'*    := <map(simple-regex-atom-to-string)> p*;
      string := <concat-strings> p'*
  
  simple-regex-atom-to-string:
    SingleAtom(AtomLiteral(s)) -> s
  
  simple-regex-atom-to-string:
    SingleAtom(AtomCharacter(Quoted(s))) -> s
  
  is-parse-only-test =
    SuccessParsing + FailsParsing

  grab-messages:
    (errors, warnings, notes) -> <write-to-string> // TODO: make nice string?
    where
      rules(GrabbedErrors   :+= errors);
      rules(GrabbedWarnings :+= warnings);
      rules(GrabbedNotes    :+= notes)

  grab-errors:
    (errors, _, _) -> <write-to-string> errors // TODO: make nice string?
    where
      rules(GrabbedErrors :+= errors)

  grab-warnings:
    (_, warnings, _) -> <write-to-string> warnings // TODO: make nice string?
    where
      rules(GrabbedWarnings :+= warnings)

signature constructors
  
  Fail : String -> Term
  Error : String -> Term
  fun : AFun -> ATerm

rules

  external plugin-strategy-evaluate(print-trace |language, strategy)

  check-warning:
    TestStratego(_, description(d), s, expectation) -> (d, warning)
    where
      plugin-strategy-invoke(|<Language>, "editor-init")
    ; s' := SDefT(d, [], [], s)
    ; result := <plugin-strategy-evaluate(<not(StrategoFails)> expectation
                                          |<Language>, s')> ()
    ; try(<grab-strategy-success-result(|d, result)> expectation)
    ; if !result => Error(error) then
        warning := error
      else
        warning := <check-expectation(|result)> expectation
      end

  check-expectation(|result) :
    StrategoFails() -> $[Failure expected: <pre>[<write-to-string> result']</pre>]
    where
      !result => Some(result')

  grab-strategy-success-result(|d, result) :
    StrategoSuccess() -> StrategoSuccess()
    where
      !result => Some(result')
    ; rules(GrabbedNotes :+= (d, $[Result: [<write-to-string> result'] (no => expectation specified)]))

  check-expectation(|result) :
    <not(StrategoFails)> -> $[Failure unexpected: <pre>[trace]</pre>]
    where
      !result => Fail(trace)

  check-expectation(|result) :
    StrategoEquals(p) -> $[Unexpected result: [<write-to-string> result']]
    where
      !result => Some(result')
    ; result'' := <explode-aterm> result'
    ; not(<aterm-eq> (result'', p))
