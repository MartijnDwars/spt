module check-complete

imports
  libstratego-lib
  libstratego-aterm
  include/Spoofax-Testing
  lib/editor-common.generated
  aterm-eq
  spoofax_testing
  check-resolve
  check

signature constructors
    
  COMPLETION : Term -> Term
  NOCONTEXT  : Term -> Term

rules

  spt-desugar:
    Complete(x) -> CompleteTo(x, wildcard())

  check-expectation(|ast, selections, messages) :
    CompleteTo(from, to) -> error
    where
      from' := <resolve-selection(|selections)> from;
      to'   := <resolve-selection(|selections)> to
    with
      from''    := <get-completion-input-term> from';
      resolvers := <spt-get-content-proposers>;
      results   := <map(execute-service(|from''))> resolvers
    where
      switch !results
        case one(is-successful-completion(|to')): fail
        case one(?Some(t)):  error := $[Unexpected result: [<write-to-string> t]]
        case one(?Error(m)): error := $[Unexpected error: [m]]
        case one(?Fail(m)):  error := $[Unexpected error: [m]]
        otherwise: with(fail)
      end;
      // On failure, report any inline errors
      <grab-messages> messages
  
  get-completion-input-term:
    x -> tuple
    where
      x-root := <repeat(prim("SSL_EXT_get_parent", <id>))> x;
      if y-root := <alltd(origin-equal(|x); !COMPLETION(<id>))> x-root then
        y := <oncetd(?COMPLETION(_))> y-root
      else
        y := NOCONTEXT(x)
      end;
      tuple := <get-service-input-term> y
  
  is-successful-completion(|expected):
    Some(result) -> <id>
    where
      !expected => wildcard()
    <+
      <oncetd(strip-annos; ?expected)> result
      